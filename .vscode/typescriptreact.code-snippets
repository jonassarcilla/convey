{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "Typescript React PureComponent": {
    "prefix": "rpc",
    "body": [
      "import * as React from 'react'",
      "",
      "export class $1 extends React.PureComponent {",
      "\trender() {",
      "\t\treturn ($2);",
      "}}"
    ],
    "description": "Typescript React PureComponent"
  },

  "Twind": {
    "prefix": "cc",
    "body": ["className={tw`$1`}"],
    "description": "Twind"
  },

  "Typescript React Function Component": {
    "prefix": "rc",
    "body": [
      "import React from 'react'",
      "",
      "export interface I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props {",
      "}",
      "",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} = ({}: I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Props) => {",
      "\treturn (",
      "\t\t<>$1</>",
      "\t)",
      "}",
      "",
      "export default React.memo(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/});"
    ],
    "description": "Typescript React Function Component"
  },

  "Typescript React Jest": {
    "prefix": "rct",
    "body": [
      "import { render } from '@testing-library/react';",
      "import forceCast from '@utils/helper/forceCast';",
      "import { I${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}Props } from './${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}';",
      "import { Default } from './${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}.stories';",
      "",
      "describe('${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}', () => {",
      "\tit('renders the component in default state', () => {",
      "\t\tconst args = forceCast<I${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}Props>(Default.args);",
      "\t\trender(<Default {...args} />);",
      "\t\texpect(1).toBe(1);",
      "\t});",
      "});"
    ],
    "description": "Typescript React PureComponent"
  },

  "Typescript React Hooks": {
    "prefix": "rch",
    "body": [
      "const use${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/} = () => {",
      "\treturn {};",
      "};",
      "",
      "export default use${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/};"
    ],
    "description": "Typescript React PureComponent"
  },

  "Typescript React Function Component Page without Layout": {
    "prefix": "rp",
    "body": [
      "import React from 'react'",
      "import type { NextPage } from 'next'",
      "import Head from 'next/head'",
      "",
      "const $1: NextPage = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<Head>",
      "\t\t\t\t<title>$1 | SiPHON</title>",
      "\t\t\t\t<meta name=\"description\" content=\"Generated by create next app\" />",
      "\t\t\t\t<link rel=\"icon\" href=\"/favicon.ico\" />",
      "\t\t\t</Head>",
      "\t\t</>",
      "\t);",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Typescript React Function Component Page without Layout"
  },

  "Typescript React Function Component Page with Layout": {
    "prefix": "rpl",
    "body": [
      "import React from 'react'",
      "import Head from 'next/head'",
      "import { NextPageWithLayout } from '@pages/page'",
      "",
      "const $1: NextPageWithLayout = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<Head>",
      "\t\t\t\t<title>$1 | SiPHON</title>",
      "\t\t\t\t<meta name=\"description\" content=\"Generated by create next app\" />",
      "\t\t\t\t<link rel=\"icon\" href=\"/favicon.ico\" />",
      "\t\t\t</Head>",
      "\t\t</>",
      "\t);",
      "}",
      "",
      "export default $1;",
      "",
      "$1.getLayout = (page) => {",
      "\treturn <>{page}</>;",
      "}"
    ],
    "description": "Typescript React Function Component Page with Layout"
  },

  "Typescript React Function Component Stories": {
    "prefix": "rcs",
    "body": [
      "import { ComponentMeta, ComponentStory } from '@storybook/react';",
      "import ${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}, { I${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}Props } from './${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}';",
      "import { mock${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}Props } from './${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}.mocks';",
      "",
      "export default {",
      "\ttitle: '$1',",
      "\tcomponent: ${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/},",
      "\t// More on argTypes: https://storybook.js.org/docs/react/api/argtypes",
      "\targTypes: {},",
      "} as ComponentMeta<typeof ${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}>;",
      "",
      "// More on component templates: https://storybook.js.org/docs/react/writing-stories/introduction#using-args",
      "const Template: ComponentStory<typeof ${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}> = (args) => {",
      "\treturn <${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/} {...args} />;",
      "};",
      "",
      "export const Default = Template.bind({});",
      "",
      "Default.args = {",
      "\t...mock${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}Props.base,",
      "} as I${TM_FILENAME_BASE/([^.]+).*/${1:/pascalcase}/}Props;"
    ],
    "description": "Typescript React Function Component Stories"
  },

  "React Native StyleSheet": {
    "prefix": "rnss",
    "body": [
      "import {StyleSheet} from 'react-native'",
      "const styles = StyleSheet.create({",
      "",
      "});"
    ],
    "description": "React Native StyleSheet"
  },
  "Toggle State": {
    "prefix": "tog",
    "body": ["this.setState(state => ({", "\topen: !state.open", "}));"],
    "description": "toggle state"
  },
  "console.log": {
    "prefix": "cl",
    "body": ["console.log($1)"],
    "description": "console.log"
  },
  "className={classnames()}": {
    "prefix": "cc",
    "body": ["className={classnames('$1')}"],
    "description": "tailwind react stuff"
  },
  "Apollo Query Component": {
    "prefix": "apq",
    "body": [
      "interface Props {",
      "  children: (data: QueryResult<$1, OperationVariables>) => JSX.Element;",
      "}",
      "",
      "export class $2 extends React.PureComponent<Props> {",
      "  render() {",
      "    return (",
      "     <Query<$1> query={$3}>{x => this.props.children(x)}</Query>",
      "    );",
      "  }",
      "}"
    ],
    "description": "Apollo Query Component"
  }
}
